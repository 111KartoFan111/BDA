// frontend/src/services/blockchain/walletConnectors.js
import Web3 from 'web3'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–æ—à–µ–ª—å–∫–æ–≤
export const WALLET_TYPES = {
  METAMASK: 'metamask',
  WALLET_CONNECT: 'walletconnect',
  COINBASE: 'coinbase',
  TRUST: 'trust',
  BINANCE: 'binance',
  INJECTED: 'injected',
  WEB3_MODAL: 'web3modal'
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
export const detectAvailableWallets = () => {
  const wallets = []

  // MetaMask (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤)
  if (typeof window !== 'undefined' && window.ethereum?.isMetaMask) {
    wallets.push({
      type: WALLET_TYPES.METAMASK,
      name: 'MetaMask',
      icon: 'ü¶ä',
      available: true,
      description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫'
    })
  }

  // Coinbase Wallet
  if (typeof window !== 'undefined' && window.ethereum?.isCoinbaseWallet) {
    wallets.push({
      type: WALLET_TYPES.COINBASE,
      name: 'Coinbase Wallet',
      icon: 'üîµ',
      available: true,
      description: '–ö–æ—à–µ–ª–µ–∫ –æ—Ç –±–∏—Ä–∂–∏ Coinbase'
    })
  }

  // Trust Wallet
  if (typeof window !== 'undefined' && window.ethereum?.isTrust) {
    wallets.push({
      type: WALLET_TYPES.TRUST,
      name: 'Trust Wallet',
      icon: 'üõ°Ô∏è',
      available: true,
      description: '–ú–æ–±–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Trust Wallet'
    })
  }

  // Binance Chain Wallet
  if (typeof window !== 'undefined' && window.BinanceChain) {
    wallets.push({
      type: WALLET_TYPES.BINANCE,
      name: 'Binance Wallet',
      icon: 'üü°',
      available: true,
      description: '–ö–æ—à–µ–ª–µ–∫ –æ—Ç –±–∏—Ä–∂–∏ Binance'
    })
  }

  // –õ—é–±–æ–π –¥—Ä—É–≥–æ–π injected –∫–æ—à–µ–ª–µ–∫
  if (typeof window !== 'undefined' && window.ethereum && wallets.length === 0) {
    wallets.push({
      type: WALLET_TYPES.INJECTED,
      name: 'Web3 –ö–æ—à–µ–ª–µ–∫',
      icon: 'üîó',
      available: true,
      description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω Web3 –∫–æ—à–µ–ª–µ–∫'
    })
  }

  // WalletConnect (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –æ–ø—Ü–∏—è)
  wallets.push({
    type: WALLET_TYPES.WALLET_CONNECT,
    name: 'WalletConnect',
    icon: 'üì±',
    available: true,
    description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤'
  })

  return wallets
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫–æ—à–µ–ª—å–∫–æ–≤
class WalletManager {
  constructor() {
    this.web3 = null
    this.account = null
    this.chainId = null
    this.walletType = null
    this.provider = null
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MetaMask
  async connectMetaMask() {
    if (!window.ethereum?.isMetaMask) {
      throw new Error('MetaMask –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ MetaMask –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.')
    }

    try {
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts'
      })

      this.provider = window.ethereum
      this.web3 = new Web3(window.ethereum)
      this.account = accounts[0]
      this.chainId = await this.web3.eth.getChainId()
      this.walletType = WALLET_TYPES.METAMASK

      return this.getConnectionResult()
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MetaMask: ${error.message}`)
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WalletConnect
  async connectWalletConnect() {
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WalletConnect —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
      const { default: WalletConnect } = await import('@walletconnect/client')
      
      const connector = new WalletConnect({
        bridge: 'https://bridge.walletconnect.org',
        qrcodeModal: {
          open: (uri, cb) => {
            console.log('QR Code URI:', uri)
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showQRModal(uri, cb)
          },
          close: () => {
            this.hideQRModal()
          }
        }
      })

      if (!connector.connected) {
        await connector.createSession()
      }

      const accounts = connector.accounts
      const chainId = connector.chainId

      this.provider = connector
      this.web3 = new Web3(connector)
      this.account = accounts[0]
      this.chainId = chainId
      this.walletType = WALLET_TYPES.WALLET_CONNECT

      return this.getConnectionResult()
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WalletConnect: ${error.message}`)
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Coinbase Wallet
  async connectCoinbase() {
    if (!window.ethereum?.isCoinbaseWallet) {
      throw new Error('Coinbase Wallet –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
    }

    try {
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts'
      })

      this.provider = window.ethereum
      this.web3 = new Web3(window.ethereum)
      this.account = accounts[0]
      this.chainId = await this.web3.eth.getChainId()
      this.walletType = WALLET_TYPES.COINBASE

      return this.getConnectionResult()
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Coinbase Wallet: ${error.message}`)
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª—é–±–æ–º—É injected –∫–æ—à–µ–ª—å–∫—É
  async connectInjected() {
    if (!window.ethereum) {
      throw new Error('Web3 –∫–æ—à–µ–ª–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º.')
    }

    try {
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts'
      })

      this.provider = window.ethereum
      this.web3 = new Web3(window.ethereum)
      this.account = accounts[0]
      this.chainId = await this.web3.eth.getChainId()
      this.walletType = WALLET_TYPES.INJECTED

      return this.getConnectionResult()
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`)
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async connect(walletType) {
    switch (walletType) {
      case WALLET_TYPES.METAMASK:
        return await this.connectMetaMask()
      case WALLET_TYPES.WALLET_CONNECT:
        return await this.connectWalletConnect()
      case WALLET_TYPES.COINBASE:
        return await this.connectCoinbase()
      case WALLET_TYPES.INJECTED:
        return await this.connectInjected()
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞: ${walletType}`)
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  async disconnect() {
    if (this.walletType === WALLET_TYPES.WALLET_CONNECT && this.provider?.disconnect) {
      await this.provider.disconnect()
    }

    this.web3 = null
    this.account = null
    this.chainId = null
    this.walletType = null
    this.provider = null
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getConnectionResult() {
    return {
      web3: this.web3,
      account: this.account,
      chainId: this.chainId,
      walletType: this.walletType,
      provider: this.provider
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å QR –º–æ–¥–∞–ª–∫—É –¥–ª—è WalletConnect
  showQRModal(uri, callback) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å QR –∫–æ–¥–æ–º
    const modal = document.createElement('div')
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    `
    
    const content = document.createElement('div')
    content.style.cssText = `
      background: white;
      padding: 2rem;
      border-radius: 12px;
      text-align: center;
      max-width: 400px;
    `
    
    content.innerHTML = `
      <h3>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</h3>
      <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å–≤–æ–∏–º –º–æ–±–∏–ª—å–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º:</p>
      <div id="qr-code"></div>
      <p style="font-size: 0.9em; color: #666; margin-top: 1rem;">
        –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:
      </p>
      <input type="text" value="${uri}" readonly style="width: 100%; padding: 0.5rem; margin: 0.5rem 0;">
      <button onclick="this.parentElement.parentElement.remove()">–û—Ç–º–µ–Ω–∞</button>
    `
    
    modal.appendChild(content)
    document.body.appendChild(modal)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É qrcode)
    this.generateQRCode(uri, content.querySelector('#qr-code'))
    
    this.currentModal = modal
  }

  // –°–∫—Ä—ã—Ç—å QR –º–æ–¥–∞–ª–∫—É
  hideQRModal() {
    if (this.currentModal) {
      this.currentModal.remove()
      this.currentModal = null
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  generateQRCode(text, container) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ç–∏–ø–∞ qrcode.js
    container.innerHTML = `
      <div style="
        width: 200px; 
        height: 200px; 
        background: #f0f0f0; 
        margin: 1rem auto; 
        display: flex; 
        align-items: center; 
        justify-content: center;
        border: 1px solid #ddd;
      ">
        QR –∫–æ–¥
      </div>
    `
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
export const walletManager = new WalletManager()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
export const getWalletRecommendations = () => {
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent)
  const isAndroid = /Android/.test(navigator.userAgent)

  const recommendations = []

  if (isMobile) {
    recommendations.push({
      title: '–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
      wallets: [
        {
          name: 'Trust Wallet',
          description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DApps',
          downloadUrl: isIOS 
            ? 'https://apps.apple.com/app/trust-crypto-bitcoin-wallet/id1288339409'
            : 'https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp',
          icon: 'üõ°Ô∏è'
        },
        {
          name: 'Coinbase Wallet',
          description: '–ö–æ—à–µ–ª–µ–∫ –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –±–∏—Ä–∂–∏',
          downloadUrl: isIOS
            ? 'https://apps.apple.com/app/coinbase-wallet/id1278383455'
            : 'https://play.google.com/store/apps/details?id=org.toshi',
          icon: 'üîµ'
        },
        {
          name: 'MetaMask Mobile',
          description: '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞',
          downloadUrl: isIOS
            ? 'https://apps.apple.com/app/metamask/id1438144202'
            : 'https://play.google.com/store/apps/details?id=io.metamask',
          icon: 'ü¶ä'
        }
      ]
    })
  } else {
    recommendations.push({
      title: '–î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞',
      wallets: [
        {
          name: 'MetaMask',
          description: '–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫',
          downloadUrl: 'https://metamask.io/',
          icon: 'ü¶ä'
        },
        {
          name: 'Coinbase Wallet Extension',
          description: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –æ—Ç Coinbase',
          downloadUrl: 'https://www.coinbase.com/wallet',
          icon: 'üîµ'
        }
      ]
    })
  }

  return recommendations
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const isMobileEnvironment = () => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ deep link
export const openWalletApp = (walletType, dappUrl) => {
  const deepLinks = {
    [WALLET_TYPES.TRUST]: `trust://open_url?coin_id=60&url=${encodeURIComponent(dappUrl)}`,
    [WALLET_TYPES.METAMASK]: `metamask://open?url=${encodeURIComponent(dappUrl)}`,
    [WALLET_TYPES.COINBASE]: `cbwallet://open?url=${encodeURIComponent(dappUrl)}`
  }

  const deepLink = deepLinks[walletType]
  if (deepLink) {
    window.location.href = deepLink
  }
}

export default walletManager