# backend/test_email.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email.
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω—è backend: python test_email.py
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.email import EmailService
from app.core.config import settings
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_email_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailService."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Email Service")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"SMTP Server: {settings.SMTP_SERVER}")
    print(f"SMTP Port: {settings.SMTP_PORT}")
    print(f"SMTP Username: {settings.SMTP_USERNAME}")
    print(f"Email From: {settings.EMAIL_FROM}")
    print(f"TLS: {settings.SMTP_TLS}")
    print("-" * 50)
    
    if not settings.SMTP_USERNAME or not settings.SMTP_PASSWORD:
        print("‚ùå SMTP credentials not configured in .env file")
        print("Please set SMTP_USERNAME and SMTP_PASSWORD")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    email_service = EmailService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π email
    test_email = input("Enter test email address: ").strip()
    if not test_email:
        test_email = settings.SMTP_USERNAME  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–∞
    
    print(f"Sending test email to: {test_email}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π email
    print("\nüìß Test 1: Simple email")
    result1 = email_service.send_email(
        to_email=test_email,
        subject="RentChain Test Email",
        html_content="<h1>Hello!</h1><p>This is a test email from RentChain.</p>",
        text_content="Hello! This is a test email from RentChain."
    )
    print(f"Result: {'‚úÖ SUCCESS' if result1 else '‚ùå FAILED'}")
    
    # –¢–µ—Å—Ç 2: Welcome email
    print("\nüëã Test 2: Welcome email")
    result2 = email_service.send_welcome_email(
        to_email=test_email,
        user_name="Test User"
    )
    print(f"Result: {'‚úÖ SUCCESS' if result2 else '‚ùå FAILED'}")
    
    # –¢–µ—Å—Ç 3: Password reset email
    print("\nüîê Test 3: Password reset email")
    test_token = "test_token_12345"
    result3 = email_service.send_password_reset_email(
        to_email=test_email,
        token=test_token
    )
    print(f"Result: {'‚úÖ SUCCESS' if result3 else '‚ùå FAILED'}")
    
    # –¢–µ—Å—Ç 4: Email verification
    print("\n‚úâÔ∏è Test 4: Email verification")
    result4 = email_service.send_email_verification(
        to_email=test_email,
        token=test_token
    )
    print(f"Result: {'‚úÖ SUCCESS' if result4 else '‚ùå FAILED'}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    total_success = sum([result1, result2, result3, result4])
    print(f"Total tests passed: {total_success}/4")
    
    if total_success == 4:
        print("üéâ All email tests passed!")
        return True
    else:
        print(f"‚ö†Ô∏è {4 - total_success} tests failed. Check your SMTP configuration.")
        return False

def test_celery_tasks():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery tasks."""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery Tasks")
    print("=" * 50)
    
    try:
        from app.tasks import (
            send_email_task, 
            send_password_reset_email_task,
            send_email_verification_task,
            send_welcome_email_task
        )
        
        test_email = input("Enter test email for Celery tasks: ").strip()
        if not test_email:
            test_email = settings.SMTP_USERNAME
        
        print(f"Queueing Celery tasks for: {test_email}")
        
        # –¢–µ—Å—Ç Celery task
        print("\nüì® Testing Celery email task")
        task = send_email_task.delay(
            to_email=test_email,
            subject="Celery Test Email",
            html_content="<h1>Celery Test</h1><p>This email was sent via Celery task queue.</p>"
        )
        
        print(f"Task ID: {task.id}")
        print("Task queued successfully!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        print("Waiting for task result...")
        try:
            result = task.get(timeout=30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            print(f"Task result: {result}")
            if result.get('success'):
                print("‚úÖ Celery email task completed successfully!")
            else:
                print(f"‚ùå Celery email task failed: {result.get('error')}")
        except Exception as e:
            print(f"‚ö†Ô∏è Could not get task result: {e}")
            print("This might mean Celery worker is not running.")
        
    except ImportError as e:
        print(f"‚ùå Could not import Celery tasks: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error testing Celery: {e}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üöÄ RentChain Email Testing Script")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.SECRET_KEY:
        print("‚ùå Settings not loaded properly")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º email service
    email_success = test_email_service()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Celery (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    test_celery = input("\nTest Celery tasks? (y/n): ").strip().lower()
    if test_celery in ['y', 'yes']:
        test_celery_tasks()
    
    print("\n" + "=" * 50)
    print("üìã Testing completed!")
    
    if not email_success:
        print("\nüí° Troubleshooting tips:")
        print("1. Check your .env file has correct SMTP settings")
        print("2. Make sure SMTP_PASSWORD is an app password (for Gmail)")
        print("3. Enable 2FA and create app password for Gmail")
        print("4. Check if your firewall blocks SMTP connections")

if __name__ == "__main__":
    main()