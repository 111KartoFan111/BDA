#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Docker:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user@example.com –Ω–∞ admin
"""

import sys
import os
import subprocess
import time
from datetime import datetime
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.models.base import Base
from app.models.item import Category
from app.models.user import User, UserRole, UserStatus
from app.core.security import get_password_hash


def check_docker_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker services."""
    
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker services...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ docker-compose
        result = subprocess.run(['docker-compose', 'ps'], 
                              capture_output=True, text=True, cwd='.')
        
        if 'db' not in result.stdout or 'Up' not in result.stdout:
            print("   ‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis
            subprocess.run(['docker-compose', 'up', '-d', 'db', 'redis'], 
                         check=True, cwd='.')
            
            print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            time.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            
        print("   ‚úÖ Docker services –≥–æ—Ç–æ–≤—ã")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Docker: {e}")
        print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω")
        print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose up -d db redis")
        return False
    except FileNotFoundError:
        print("   ‚ùå docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("\nüîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ docker-compose")
        return False


def get_docker_database_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    # –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑–≤–Ω–µ Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost —Å –ø–æ—Ä—Ç–æ–º
    return "postgresql://postgres:password@localhost:5432/rentchain"


def create_categories(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    categories_data = [
        {
            "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "slug": "electronics",
            "description": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –≥–∞–¥–∂–µ—Ç—ã",
            "icon": "üì±",
            "children": [
                {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "slug": "smartphones", "description": "–ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã", "icon": "üì±"},
                {"name": "–ù–æ—É—Ç–±—É–∫–∏", "slug": "laptops", "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "icon": "üíª"},
                {"name": "–ü–ª–∞–Ω—à–µ—Ç—ã", "slug": "tablets", "description": "–ü–ª–∞–Ω—à–µ—Ç–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "icon": "üì±"},
                {"name": "–ö–∞–º–µ—Ä—ã", "slug": "cameras", "description": "–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∫–∞–º–µ—Ä—ã", "icon": "üì∑"},
                {"name": "–ê—É–¥–∏–æ", "slug": "audio", "description": "–ù–∞—É—à–Ω–∏–∫–∏, –∫–æ–ª–æ–Ω–∫–∏", "icon": "üéß"},
            ]
        },
        {
            "name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "slug": "transport",
            "description": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞",
            "icon": "üöó",
            "children": [
                {"name": "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "slug": "cars", "description": "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "icon": "üöó"},
                {"name": "–ú–æ—Ç–æ—Ü–∏–∫–ª—ã", "slug": "motorcycles", "description": "–ú–æ—Ç–æ—Ü–∏–∫–ª—ã –∏ —Å–∫—É—Ç–µ—Ä—ã", "icon": "üèçÔ∏è"},
                {"name": "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã", "slug": "bicycles", "description": "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤", "icon": "üö≤"},
                {"name": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç—ã", "slug": "e-scooters", "description": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–∞–º–æ–∫–∞—Ç—ã", "icon": "üõ¥"},
            ]
        },
        {
            "name": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "slug": "tools",
            "description": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "icon": "üî®",
            "children": [
                {"name": "–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "slug": "power-tools", "description": "–î—Ä–µ–ª–∏, –ø–∏–ª—ã, —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "icon": "‚ö°"},
                {"name": "–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "slug": "hand-tools", "description": "–ú–æ–ª–æ—Ç–∫–∏, –æ—Ç–≤–µ—Ä—Ç–∫–∏, –∫–ª—é—á–∏", "icon": "üîß"},
                {"name": "–°–∞–¥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "slug": "garden-tools", "description": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∞–¥–∞", "icon": "üå±"},
            ]
        },
        {
            "name": "–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö",
            "slug": "sports-recreation",
            "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "icon": "‚öΩ",
            "children": [
                {"name": "–§–∏—Ç–Ω–µ—Å", "slug": "fitness", "description": "–¢—Ä–µ–Ω–∞–∂–µ—Ä—ã –∏ —Ñ–∏—Ç–Ω–µ—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "icon": "üí™"},
                {"name": "–í–æ–¥–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞", "slug": "water-sports", "description": "–ö–∞—è–∫–∏, –¥–æ—Å–∫–∏ –¥–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞", "icon": "üèÑ"},
                {"name": "–ö–µ–º–ø–∏–Ω–≥", "slug": "camping", "description": "–ü–∞–ª–∞—Ç–∫–∏, —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", "icon": "üèïÔ∏è"},
            ]
        },
        {
            "name": "–î–æ–º –∏ —Å–∞–¥",
            "slug": "home-garden",
            "description": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ —Å–∞–¥–∞",
            "icon": "üè†",
            "children": [
                {"name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "slug": "appliances", "description": "–ü—ã–ª–µ—Å–æ—Å—ã, –∫—É—Ö–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "icon": "üîå"},
                {"name": "–ú–µ–±–µ–ª—å", "slug": "furniture", "description": "–°—Ç–æ–ª—ã, —Å—Ç—É–ª—å—è, –¥–∏–≤–∞–Ω—ã", "icon": "ü™ë"},
                {"name": "–°–∞–¥–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "slug": "garden-equipment", "description": "–ì–∞–∑–æ–Ω–æ–∫–æ—Å–∏–ª–∫–∏, —Ç—Ä–∏–º–º–µ—Ä—ã", "icon": "üåø"},
            ]
        }
    ]
    
    created_count = 0
    
    for cat_data in categories_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        existing = db.query(Category).filter(Category.slug == cat_data["slug"]).first()
        if existing:
            print(f"   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            parent_id = existing.id
        else:
            # –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            parent_category = Category(
                id=uuid.uuid4(),
                name=cat_data["name"],
                slug=cat_data["slug"],
                description=cat_data["description"],
                icon=cat_data["icon"],
                level=0,
                sort_order=created_count,
                is_active=True,
                created_at=datetime.utcnow()
            )
            
            db.add(parent_category)
            db.flush()
            parent_id = parent_category.id
            created_count += 1
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_data['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if "children" in cat_data:
            for i, child_data in enumerate(cat_data["children"]):
                existing_child = db.query(Category).filter(Category.slug == child_data["slug"]).first()
                if existing_child:
                    print(f"      ‚ö†Ô∏è  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{child_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                child_category = Category(
                    id=uuid.uuid4(),
                    name=child_data["name"],
                    slug=child_data["slug"],
                    description=child_data["description"],
                    icon=child_data["icon"],
                    parent_id=parent_id,
                    level=1,
                    sort_order=i,
                    is_active=True,
                    created_at=datetime.utcnow()
                )
                
                db.add(child_category)
                created_count += 1
                print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {child_data['name']}")
    
    db.commit()
    print(f"üìÅ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {created_count}")


def setup_users(db):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    print("üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    users_data = [
        {
            "email": "user@example.com",
            "password": "password123",
            "first_name": "Test",
            "last_name": "User",
            "role": UserRole.ADMIN
        },
        {
            "email": "admin@rentchain.com", 
            "password": "admin123",
            "first_name": "Admin",
            "last_name": "RentChain",
            "role": UserRole.ADMIN
        }
    ]
    
    for user_data in users_data:
        user = db.query(User).filter(User.email == user_data["email"]).first()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                id=uuid.uuid4(),
                email=user_data["email"],
                first_name=user_data["first_name"],
                last_name=user_data["last_name"],
                password_hash=get_password_hash(user_data["password"]),
                role=user_data["role"],
                status=UserStatus.ACTIVE,
                is_email_verified=True,
                is_verified=True,
                created_at=datetime.utcnow()
            )
            db.add(user)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {user_data['email']} (–ø–∞—Ä–æ–ª—å: {user_data['password']})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            user.role = user_data["role"]
            user.status = UserStatus.ACTIVE
            user.is_verified = True
            user.updated_at = datetime.utcnow()
            print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {user_data['email']} -> —Ä–æ–ª—å: {user_data['role'].value}")
    
    db.commit()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RentChain —á–µ—Ä–µ–∑ Docker")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker services
        if not check_docker_services():
            return False
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        database_url = get_docker_database_url()
        print(f"   URL: {database_url}")
        
        engine = create_engine(database_url, echo=False)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("\nüóÑÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
        db = SessionLocal()
        try:
            create_categories(db)
            print()
            setup_users(db)
            
            print("\n" + "=" * 50)
            print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print()
            print("üìã –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
            print("   üìß user@example.com / password123 (admin)")
            print("   üìß admin@rentchain.com / admin123 (admin)")
            print()
            print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            print()
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
            print("   docker-compose up")
            print()
            print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
            print("   http://localhost:8000/docs")
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)